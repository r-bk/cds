[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true

[tasks.d]
dependencies = ["clippy", "build", "test"]

[tasks.clippy]
toolchain = "beta"
command = "cargo"
args = ["clippy", "--all-features"]

[tasks.clippy-no-default]
toolchain = "beta"
command = "cargo"
args = ["clippy", "--no-default-features"]

[tasks.test-no-default]
command = "cargo"
args = ["test", "--no-default-features"]

[tasks.build-no-default]
command = "cargo"
args = ["build", "--no-default-features"]

[tasks.doc]
env = { "RUSTDOCFLAGS" = "--cfg docsrs" }
toolchain = "nightly"
command = "cargo"
args = ["doc", "--all-features", "--no-deps", "--open"]
workspace = false

[tasks.fmt]
command = "cargo"
args = ["fmt", "--all", "--", "--check"]

[tasks.cover]
workspace = false
command = "cargo"
args = ["tarpaulin", "-p", "cds", "--exclude-files", "fuzz/*", "--all-features", "--out", "Html"]

[tasks.c]
workspace = false
dependencies = ["cover"]
script = '''
#!/usr/bin/env bash
browse ./tarpaulin-report.html >/dev/null 2>&1 &
'''

[tasks.miri]
workspace = false
script = '''
#!/usr/bin/env bash -e

INSTALLED_TOOLCHAINS=$(rustup toolchain list)
MIRI=''
for t in $INSTALLED_TOOLCHAINS; do
    if [[ $t =~ nightly-[0-9]{4}-[0-9]{2}-[0-9]{2}-.+ ]]; then
        echo "Found miri toolchain: $t"
        MIRI=$t
    fi
done
if [[ -z $MIRI ]]; then
    echo "miri not found"
    exit 1
fi

rustup run $MIRI cargo miri test --all-features
'''

[tasks.install-miri]
workspace = false
script = '''
#!/usr/bin/env bash -e
MIRI_NIGHTLY=nightly-$(curl -s https://rust-lang.github.io/rustup-components-history/x86_64-unknown-linux-gnu/miri)
echo "Found miri: $MIRI_NIGHTLY"

INSTALLED_TOOLCHAINS=$(rustup toolchain list)
if echo "$INSTALLED_TOOLCHAINS" | grep -q "$MIRI_NIGHTLY"; then
    echo "$MIRI_NIGHTLY already installed..."
    exit 0
fi

for t in $INSTALLED_TOOLCHAINS; do
    if [[ $t =~ nightly-[0-9]{4}-[0-9]{2}-[0-9]{2}-.+ ]]; then
        echo "Uninstalling old toolchain $t..."
        rustup toolchain uninstall $t
    fi
done

rustup toolchain install -c miri rust-src --profile minimal $MIRI_NIGHTLY
rustup run $MIRI_NIGHTLY cargo miri setup
'''
